532. K-diff Pairs in an Array 

Problem Statement : 
Given an array of integers nums and an integer k, return the number of unique k-diff pairs in the array.
A k-diff pair is an integer pair (nums[i], nums[j]), where the following are true:

0 <= i, j < nums.length
i != j
|nums[i] - nums[j]| == k
Notice that |val| denotes the absolute value of val.

Example 1:
Input: nums = [3,1,4,1,5], k = 2
Output: 2
Explanation: There are two 2-diff pairs in the array, (1, 3) and (3, 5).
Although we have two 1s in the input, we should only return the number of unique pairs.

Example 2:
Input: nums = [1,2,3,4,5], k = 1
Output: 4
Explanation: There are four 1-diff pairs in the array, (1, 2), (2, 3), (3, 4) and (4, 5).

Example 3:
Input: nums = [1,3,1,5,4], k = 0
Output: 1
Explanation: There is one 0-diff pair in the array, (1, 1).
 
Constraints:

1 <= nums.length <= 104
-107 <= nums[i] <= 107
0 <= k <= 107

/******************************************************************************* CPP CODE **********************************************************************************************/
Better CODE : 

class Solution {
public:
    int findPairs(vector<int>& nums, int k) {
        // TWO POINTER APPROACH : O(NLOGN) time 
        // how we can use it , we check using pointer by fixing one and keep tracking with 2nd finding out the nums[i] - nums[j] == k then we consider pairs and move both 
        // if nums[i] - nums[j] > k then we move i beacuse we have to maximize to big value we have to choose by nums[i]
        // 1st we have to sort the nums
        sort(nums.begin(),nums.end());
        int n = nums.size();
        int i = 0 ; 
        int j = i+1 ;
        int ans = 0 ;
        while(i < n && j < n){
            if(nums[j] - nums[i] == k){
                i++ ;
                j++ ;
                ans++ ;
                while(j < n && nums[j] == nums[j-1]) j++ ;// for avoiding the duplicates 
            }
            else if(nums[j] - nums[i] > k){
                i++ ;
                if(j - i == 0){
                   j++ ; // j move we got i == j
                }
            }
            else j++ ; // otherwise we move j 
        }
        return ans ; // time taken : O(NLOGN) AND SPACE : O(1) 
    }
};

// OPTIMAL APPROACH  SOLUTION : 

class Solution {
public:
    int findPairs(vector<int>& nums, int k) {
      // OPtimal Solution : Using map 
      int n = nums.size();
      if(k < 0) return 0 ;
      unordered_map<int,int> m ;
      int ans = 0 ;
      for(int n : nums) m[n]++ ;

      // now iterate the map
      for(auto p : m){
        if((!k && p.second > 1) || (k && m.count(p.first + k)) ) ans++ ;
      }
      return ans ;
   }
};

/******************************************************************************* JAVA CODE *********************************************************************************************/

class Solution {
    public int findPairs(int[] nums, int k) {
    // Optimized Approach : 
     


                      /***********************************************************************************************************************************************\  TIME COMPLEXITY : O(NLOGN + NLOGN) ||  SPACE COMP : O(K) space



    // Better Approach : using Binary Search(here) and two pointer (cPP code editor)
    int n = nums.length ;
    int count = 0 ; 
    // how we approach this when we are in what position except this ahead we will apply binary search to find this nums[i] position + k where it found then we consider pair to avoid it we have to check the duplicate 
    // to apply binary search sort the nums
    if (k < 0) return 0;
    Arrays.sort(nums); // O(NlogN) time taken 
    // Create a set to store unique pairs
    HashSet<String> seenPairs = new HashSet<>();
    for(int i = 0; i < n ; i++){
        int low = i+1 , high = n - 1 ;
        int search = nums[i] + k ;
        if(i != low){
            // Use binary search to find `nums[i] + k`
            int pos = Arrays.binarySearch(nums, low, high + 1, search);
           
            /* if(pos >= 0){
                count++ ;
                while(pos + 1 < nums.length && nums[pos] == nums[pos+1]) pos++ ;
            }
            // using this again we cant track duplicate so we are using hashsat 
            */
             // If the pair exists and we haven't counted it yet
            if (pos >= 0) {
                String pair = nums[i] + "," + search;
                if (!seenPairs.contains(pair)) {
                    seenPairs.add(pair);  // Add the pair to the set
                    count++;  // Count the valid pair
                }
            }
        }
    }
    return count ;
                                                                /***************************************************************\    TIME COMPLEXITY : O(N^2)  SPACE COMP : O(1) 

       /* // brute force solution :
        int n = nums.length ;
        int count = 0 ;

        for(int i = 0 ; i < n ; i++){
            for(int j = i+1 ; j < n ; j++){
                if(Math.abs(nums[i] - nums[j]) == k) count++ ;
            }
        }
        return count ;

     // this will give me the wrong because we cant take unique pair in count so we use optimized approach
        */

    }
}

/***************************************************************************************************************************************************************************************/
