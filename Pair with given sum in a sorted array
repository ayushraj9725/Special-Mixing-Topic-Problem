

PROBLEM SOLUTION : Pair with given sum in a sorted array

CPP IMPLEMENTATION 

      OPTIMAL SOLUTION 


      class Solution {
  public:
    int countPairs(vector<int> &arr, int target) {
        // Complete the function
        // Brute force same as that : 2 sum prblem generated all the pairs in O(N*N) times
        // Optimal Solution : Using Two Pointers Approach
        int n = arr.size() ;
        int i = 0 , j = n - 1 ;
        int count = 0 ;
        
        while(i < j){
            int sum = arr[i] + arr[j] ;
            
            if(sum < target) i++ ; // left pointer move and check 
            else if(sum > target) j-- ; // else j move to left and check 
           
            else if(sum == target){
                // here we count elemnt where we both pointer pointing 
                int ele1 = arr[i] , ele2 = arr[j] ;
                 // count the both element how many time appears
                int count1 = 0 , count2 = 0 ;
                while(i <= j && ele1 == arr[i]){
                    count1++ ;
                    i++ ;
                }
                while(i <= j && ele2 == arr[j]){
                    count2++ ;
                    j-- ;
                }
                // if ele1 and ele2 both are same 
                if(ele1 == ele2) {
                    count += (count1 * (count1 - 1))/2 ; // update with it 
                }
                else{
                    count += count1 * count2 ; // update with it's 
                }
                
                
            //   count++ ;
            //   int tmp = j - 1 ;
            //   while(tmp > 0 && arr[tmp] == arr[tmp+1]){ // check for duplicate to fix one pointer at one place
            //      count++ ;
            //      tmp-- ;
            //      j = tmp ;
            //   }
            //   i++ ;
            // This will not work here 
            }
        }
        
        return count ;
    }
};
